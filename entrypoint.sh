#!/bin/bash
set -e

# Функции для логирования
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] $1"
}

error() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] [ERROR] $1" >&2
}

warn() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] [WARN] $1"
}

# Переменные окружения с значениями по умолчанию
OPENVPN_SERVER_IP=${OPENVPN_SERVER_IP:-"localhost"}
OPENVPN_PORT=${OPENVPN_PORT:-1194}
OPENVPN_PROTOCOL=${OPENVPN_PROTOCOL:-"udp"}
OPENVPN_NETWORK=${OPENVPN_NETWORK:-"10.8.0.0"}
OPENVPN_NETMASK=${OPENVPN_NETMASK:-"255.255.255.0"}
OPENVPN_DNS1=${OPENVPN_DNS1:-"1.1.1.1"}
OPENVPN_DNS2=${OPENVPN_DNS2:-"1.0.0.1"}

# Директории
OPENVPN_DIR="/etc/openvpn"
SERVER_DIR="$OPENVPN_DIR/server"
CLIENT_DIR="$OPENVPN_DIR/client"
EASYRSA_DIR="$OPENVPN_DIR/easy-rsa"

log "Запуск OpenVPN сервера..."
log "Конфигурация:"
log "  - Сервер IP: $OPENVPN_SERVER_IP"
log "  - Порт: $OPENVPN_PORT"
log "  - Протокол: $OPENVPN_PROTOCOL"
log "  - Сеть VPN: $OPENVPN_NETWORK/$OPENVPN_NETMASK"
log "  - DNS: $OPENVPN_DNS1, $OPENVPN_DNS2"

# Создание необходимых директорий
mkdir -p "$SERVER_DIR" "$CLIENT_DIR" "$EASYRSA_DIR" /var/log/openvpn /client-configs

# Проверка и создание устройства tun
if [[ ! -c /dev/net/tun ]]; then
    log "Создание устройства /dev/net/tun..."
    mkdir -p /dev/net
    mknod /dev/net/tun c 10 200
    chmod 600 /dev/net/tun
fi

# Настройка easy-rsa
setup_easyrsa() {
    log "Настройка Easy-RSA..."

    # Создание символических ссылок на easy-rsa
    if [[ -d /usr/share/easy-rsa ]]; then
        ln -sf /usr/share/easy-rsa/* "$EASYRSA_DIR/" 2>/dev/null || true
    fi

    cd "$EASYRSA_DIR"

    # Создание конфигурации Easy-RSA
    if [[ ! -f vars ]]; then
        log "Создание конфигурации Easy-RSA..."
        cat > vars << 'VARS_EOF'
# Easy-RSA Configuration
set_var EASYRSA_ALGO ec
set_var EASYRSA_DIGEST sha512
set_var EASYRSA_REQ_COUNTRY "RU"
set_var EASYRSA_REQ_PROVINCE "Moscow"
set_var EASYRSA_REQ_CITY "Moscow"
set_var EASYRSA_REQ_ORG "OpenVPN Docker"
set_var EASYRSA_REQ_EMAIL "admin@openvpn.local"
set_var EASYRSA_REQ_OU "IT Department"
set_var EASYRSA_KEY_SIZE 2048
set_var EASYRSA_CA_EXPIRE 3650
set_var EASYRSA_CERT_EXPIRE 3650
set_var EASYRSA_BATCH "yes"
VARS_EOF
    fi
}

# Инициализация PKI
init_pki() {
    log "Инициализация PKI..."

    cd "$EASYRSA_DIR"

    # Инициализация PKI если не существует
    if [[ ! -d pki ]]; then
        log "Создание новой PKI..."
        ./easyrsa init-pki
    fi

    # Создание CA если не существует
    if [[ ! -f pki/ca.crt ]]; then
        log "Создание Certificate Authority..."
        echo "OpenVPN Docker CA" | ./easyrsa build-ca nopass
    fi

    # Создание сертификата сервера если не существует
    if [[ ! -f pki/issued/server.crt ]]; then
        log "Создание сертификата сервера..."
        echo "OpenVPN Docker Server" | ./easyrsa gen-req server nopass
        echo "yes" | ./easyrsa sign-req server server
    fi

    # Создание DH параметров если не существуют
    if [[ ! -f pki/dh.pem ]]; then
        log "Генерация Diffie-Hellman параметров..."
        ./easyrsa gen-dh
    fi

    # Создание TLS-crypt ключа если не существует
    if [[ ! -f pki/ta.key ]]; then
        log "Генерация TLS-crypt ключа..."
        openvpn --genkey secret pki/ta.key
    fi

    # Создание CRL если не существует
    if [[ ! -f pki/crl.pem ]]; then
        log "Создание Certificate Revocation List..."
        ./easyrsa gen-crl
    fi

    # Копирование файлов в директорию сервера
    log "Копирование сертификатов в директорию сервера..."
    cp pki/ca.crt "$SERVER_DIR/"
    cp pki/issued/server.crt "$SERVER_DIR/"
    cp pki/private/server.key "$SERVER_DIR/"
    cp pki/dh.pem "$SERVER_DIR/"
    cp pki/ta.key "$SERVER_DIR/"
    cp pki/crl.pem "$SERVER_DIR/"

    # Настройка прав доступа
    chmod 400 "$SERVER_DIR/server.key"
    chmod 444 "$SERVER_DIR/ca.crt"
    chmod 444 "$SERVER_DIR/server.crt"
    chmod 444 "$SERVER_DIR/dh.pem"
    chmod 400 "$SERVER_DIR/ta.key"
    chmod 444 "$SERVER_DIR/crl.pem"
}

# Создание конфигурации сервера
create_server_config() {
    if [[ -f "$SERVER_DIR/server.conf" ]]; then
        log "Конфигурация сервера уже существует"
        return
    fi

    log "Создание конфигурации сервера..."

    cat > "$SERVER_DIR/server.conf" << SERVER_CONF
# OpenVPN Server Configuration
# Generated by OpenVPN Docker

# Базовые настройки
port $OPENVPN_PORT
proto $OPENVPN_PROTOCOL
dev tun

# Сертификаты и ключи
ca ca.crt
cert server.crt
key server.key
dh dh.pem
tls-crypt ta.key

# Сетевые настройки
topology subnet
server $OPENVPN_NETWORK $OPENVPN_NETMASK
ifconfig-pool-persist /var/log/openvpn/ipp.txt

# Маршрутизация клиентов
push "redirect-gateway def1 bypass-dhcp"
push "dhcp-option DNS $OPENVPN_DNS1"
push "dhcp-option DNS $OPENVPN_DNS2"

# Настройки безопасности
cipher AES-256-GCM
auth SHA256
tls-version-min 1.2
tls-cipher TLS-ECDHE-RSA-WITH-AES-256-GCM-SHA384

# Управление клиентами
keepalive 10 120
max-clients 100
duplicate-cn

# Привилегии
user nobody
group nogroup

# Постоянные настройки
persist-key
persist-tun

# CRL для отзыва сертификатов
crl-verify crl.pem

# Логирование
status /var/log/openvpn/status.log 10
log-append /var/log/openvpn/server.log
verb 3
mute 20

# Дополнительные настройки
explicit-exit-notify 1
script-security 2

# Оптимизация производительности
fast-io
comp-lzo adaptive
push "comp-lzo adaptive"

# Настройки подключения
connect-retry-max 5
resolv-retry infinite
SERVER_CONF

    log "Конфигурация сервера создана"
}

# Создание первого клиента
create_default_client() {
    local client_name="client1"

    if [[ -f "$CLIENT_DIR/$client_name.ovpn" ]]; then
        log "Клиент '$client_name' уже существует"
        return
    fi

    log "Создание клиента '$client_name'..."

    cd "$EASYRSA_DIR"

    # Генерация ключа и сертификата клиента
    if [[ ! -f "pki/issued/$client_name.crt" ]]; then
        echo "$client_name" | ./easyrsa gen-req "$client_name" nopass
        echo "yes" | ./easyrsa sign-req client "$client_name"
    fi

    # Создание .ovpn файла
    create_client_config "$client_name"

    log "Клиент '$client_name' создан"
}

# Функция создания конфигурации клиента
create_client_config() {
    local client_name="$1"

    if [[ -z "$client_name" ]]; then
        error "Не указано имя клиента"
        return 1
    fi

    log "Создание конфигурации для клиента '$client_name'..."

    cat > "$CLIENT_DIR/$client_name.ovpn" << CLIENT_CONF
# OpenVPN Client Configuration
# Client: $client_name
# Generated: $(date)

client
dev tun
proto $OPENVPN_PROTOCOL
remote $OPENVPN_SERVER_IP $OPENVPN_PORT
resolv-retry infinite
nobind

# Привилегии
user nobody
group nogroup

# Постоянные настройки
persist-key
persist-tun

# Безопасность
remote-cert-tls server
cipher AES-256-GCM
auth SHA256
key-direction 1
tls-version-min 1.2

# Логирование
verb 3
mute 20

# Дополнительные настройки
connect-retry-max 5
connect-timeout 10

# Сжатие
comp-lzo adaptive

<ca>
$(cat "$SERVER_DIR/ca.crt")
</ca>

<cert>
$(cat "$EASYRSA_DIR/pki/issued/$client_name.crt")
</cert>

<key>
$(cat "$EASYRSA_DIR/pki/private/$client_name.key")
</key>

<tls-crypt>
$(cat "$SERVER_DIR/ta.key")
</tls-crypt>
CLIENT_CONF

    # Копирование в директорию экспорта
    cp "$CLIENT_DIR/$client_name.ovpn" "/client-configs/" 2>/dev/null || true

    log "Конфигурация клиента '$client_name' создана"
}

# Настройка сети
setup_networking() {
    log "Настройка сети..."

    # Включение IP forwarding
    echo 1 > /proc/sys/net/ipv4/ip_forward
    echo 1 > /proc/sys/net/ipv6/conf/all/forwarding 2>/dev/null || true

    # Настройка iptables правил для NAT
    # Эти правила должны быть настроены на хосте, но мы можем попробовать в контейнере
    if command -v iptables >/dev/null 2>&1; then
        # Правила NAT для VPN трафика
        iptables -t nat -C POSTROUTING -s "$OPENVPN_NETWORK/24" -j MASQUERADE 2>/dev/null || \
        iptables -t nat -A POSTROUTING -s "$OPENVPN_NETWORK/24" -j MASQUERADE

        # Разрешение forwarding для tun интерфейса
        iptables -C FORWARD -i tun+ -j ACCEPT 2>/dev/null || \
        iptables -A FORWARD -i tun+ -j ACCEPT

        iptables -C FORWARD -o tun+ -j ACCEPT 2>/dev/null || \
        iptables -A FORWARD -o tun+ -j ACCEPT

        log "Правила iptables настроены"
    else
        warn "iptables недоступен в контейнере, убедитесь что правила настроены на хосте"
    fi
}

# Функция проверки конфигурации
validate_config() {
    log "Проверка конфигурации..."

    local errors=0

    # Проверка необходимых файлов
    local required_files=(
        "$SERVER_DIR/ca.crt"
        "$SERVER_DIR/server.crt"
        "$SERVER_DIR/server.key"
        "$SERVER_DIR/dh.pem"
        "$SERVER_DIR/ta.key"
        "$SERVER_DIR/server.conf"
    )

    for file in "${required_files[@]}"; do
        if [[ ! -f "$file" ]]; then
            error "Отсутствует файл: $file"
            ((errors++))
        fi
    done

    # Проверка синтаксиса конфигурации
    if ! openvpn --config "$SERVER_DIR/server.conf" --test-crypto; then
        error "Ошибка в конфигурации OpenVPN"
        ((errors++))
    fi

    if [[ $errors -gt 0 ]]; then
        error "Найдено $errors ошибок в конфигурации"
        return 1
    fi

    log "Конфигурация корректна"
    return 0
}

# Обработка сигналов
cleanup() {
    log "Получен сигнал завершения, остановка OpenVPN..."
    pkill -TERM openvpn 2>/dev/null || true
    exit 0
}

trap cleanup SIGTERM SIGINT

# Главная функция
main() {
    log "=== Инициализация OpenVPN сервера ==="

    # Настройка easy-rsa
    setup_easyrsa

    # Инициализация PKI
    init_pki

    # Создание конфигурации сервера
    create_server_config

    # Создание клиента по умолчанию
    create_default_client

    # Настройка сети
    setup_networking

    # Проверка конфигурации
    if ! validate_config; then
        error "Конфигурация содержит ошибки, завершение работы"
        exit 1
    fi

    log "=== Инициализация завершена ==="
    log "Запуск OpenVPN сервера..."

    # Переход в директорию сервера
    cd "$SERVER_DIR"

    # Запуск OpenVPN с детальным логированием
    exec openvpn \
        --config server.conf \
        --verb 3 \
        --status /var/log/openvpn/status.log 10 \
        --log-append /var/log/openvpn/server.log
}

# Проверка аргументов командной строки
case "${1:-}" in
    "openvpn"|"")
        main
        ;;
    "bash"|"sh")
        exec "$@"
        ;;
    *)
        log "Выполнение команды: $*"
        exec "$@"
        ;;
esac